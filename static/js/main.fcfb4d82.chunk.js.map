{"version":3,"sources":["logo.svg","components/Homepage.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Homepage","handleFilter","sex","filtering","state","list","filter","item","gender","setState","filteredList","handleSort","sort","a","b","textA","name","first","toUpperCase","textB","fetch","then","res","json","results","catch","err","console","log","className","onClick","Table","striped","bordered","hover","variant","this","map","last","cell","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"mIAAAA,EAAOC,QAAU,IAA0B,kC,uJCqE5BC,E,kDAjEX,aAAe,IAAD,8BACV,gBAiBJC,aAAe,SAACC,GACZ,IAAIC,EAAqB,SAARD,EAAkB,EAAKE,MAAMC,KAAKC,QAAO,SAAAC,GAAI,MAAoB,SAAhBA,EAAKC,UAAqB,EAAKJ,MAAMC,KAAKC,QAAO,SAAAC,GAAI,MAAoB,WAAhBA,EAAKC,UAChI,EAAKC,SAAS,CACVC,aAAcP,KArBR,EAyBdQ,WAAa,WACT,IAAIR,EAAY,EAAKC,MAAMM,aAAaE,MAAK,SAAUC,EAAGC,GACtD,IAAIC,EAAQF,EAAEG,KAAKC,MAAMC,cACrBC,EAAQL,EAAEE,KAAKC,MAAMC,cACzB,OAAQH,EAAQI,GAAU,EAAKJ,EAAQI,EAAS,EAAI,KAExD,EAAKV,SAAS,CACVC,aAAcP,KA9BlB,EAAKC,MAAQ,CAAEC,KAAM,GAAIK,aAAc,IAF7B,E,gEAIO,IAAD,OAChBU,MAAM,0CACDC,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MAAK,SAAAC,GACF,EAAKb,SAAS,CACVJ,KAAMiB,EAAIE,QACVd,aAAcY,EAAIE,aAGzBC,OAAM,SAAAC,GACHC,QAAQC,IAAIF,Q,+BAqBd,IAAD,OACL,OAAQ,6BACJ,8CACA,yDACA,4BAAQG,UAAU,sBAAsBC,QAAS,kBAAM,EAAK7B,aAAa,UAAzE,wBACA,4BAAQ4B,UAAU,sBAAsBC,QAAS,kBAAM,EAAK7B,aAAa,YAAzE,0BACA,4BAAQ4B,UAAU,wBAAwBC,QAAS,kBAAM,EAAKnB,eAA9D,sBACA,kBAACoB,EAAA,EAAD,CAAOC,SAAO,EAACC,UAAQ,EAACC,OAAK,EAACC,QAAQ,QAClC,+BACI,4BACI,0CACA,yCACA,8CAGR,+BACKC,KAAKhC,MAAMM,aAAa2B,KAAI,SAAA9B,GAAI,OAEzB,4BACI,4BAAKA,EAAKS,KAAKC,OACf,4BAAKV,EAAKS,KAAKsB,MACf,4BAAK/B,EAAKgC,iB,GAzDnBC,a,MCSRC,MANf,WACE,OACE,kBAAC,EAAD,OCIgBC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBjC,MAAK,SAAAkC,GACJA,EAAaC,gBAEd/B,OAAM,SAAAgC,GACL9B,QAAQ8B,MAAMA,EAAMC,a","file":"static/js/main.fcfb4d82.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { Component } from 'react';\nimport Table from 'react-bootstrap/Table';\n\nclass Homepage extends Component {\n    constructor() {\n        super()\n        this.state = { list: [], filteredList: [] }\n    }\n    componentDidMount() {\n        fetch(\"https://randomuser.me/api/?results=100\")\n            .then(res => res.json())\n            .then(res => {\n                this.setState({\n                    list: res.results,\n                    filteredList: res.results\n                })\n            })\n            .catch(err => {\n                console.log(err)\n            })\n    }\n\n    handleFilter = (sex) => {\n        let filtering = (sex === 'male') ? this.state.list.filter(item => item.gender === 'male') : this.state.list.filter(item => item.gender === 'female')\n        this.setState({\n            filteredList: filtering\n        })\n    }\n\n    handleSort = () => {\n        let filtering = this.state.filteredList.sort(function (a, b) {\n            var textA = a.name.first.toUpperCase();\n            var textB = b.name.first.toUpperCase();\n            return (textA < textB) ? -1 : (textA > textB) ? 1 : 0;\n        });\n        this.setState({\n            filteredList: filtering\n        })\n    }\n    render() {\n        return (<div>\n            <h1>User Directory</h1>\n            <p>Create your user Directory</p>\n            <button className=\"btn btn-primary m-3\" onClick={() => this.handleFilter('male')}>Filter by Sex (male)</button>\n            <button className=\"btn btn-primary m-3\" onClick={() => this.handleFilter('female')}>Filter by Sex (female)</button>\n            <button className=\"btn btn-secondary m-3\" onClick={() => this.handleSort()}>Sort by First Name</button>\n            <Table striped bordered hover variant=\"dark\">\n                <thead>\n                    <tr>\n                        <th>First Name</th>\n                        <th>Last Name</th>\n                        <th>Phone Number</th>\n                    </tr>\n                </thead>\n                <tbody>\n                    {this.state.filteredList.map(item =>\n                        (\n                            <tr>\n                                <td>{item.name.first}</td>\n                                <td>{item.name.last}</td>\n                                <td>{item.cell}</td>\n                            </tr>\n                        )\n                    )}\n                </tbody>\n            </Table>\n        </div>)\n    }\n}\nexport default Homepage;\n\n","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport Homepage from \"./components/Homepage\"\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nfunction App() {\n  return (\n    <Homepage/>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}